# -*- coding: utf-8 -*-
import users_data_controller
import bot_log_controller
import vk_utils
import telebot
import config

from threading import Thread
from telebot import types
from time import sleep

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = telebot.TeleBot(config.TOKEN)


# –ü—Ä–∏ –ø–µ—Ä–≤–æ–º –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞
@bot.message_handler(commands=['start'])
def send_welcome_message(message):
    # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è "–ù—É –ø—Ä–∏–≤–µ—Ç, <–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è>))"
    bot.send_message(message.chat.id,  # –í –∫–∞–∫–æ–π —á–∞—Ç –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ
                     # –ö–∞–∫–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                     config.WELCOME_MESSAGE.encode('utf-8').format(message.from_user),
                     # –ö–∞–∫ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å —Å—Ç—Ä–æ–∫—É
                     parse_mode='html',
                     # –ü–æ–¥–∫–ª—é—á–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
                     reply_markup=init_start_keyboard())
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å—Ç–∏–∫–µ—Ä–∞
    sticker = open(config.WELCOME_STICKER, 'rb')
    # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å—Ç–∏–∫–µ—Ä–∞
    bot.send_sticker(message.chat.id, sticker)


# –ü—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
@bot.message_handler(content_types=['text'])
def on_message_received(message):
    if message.chat.type == 'private':
        # –ü–æ–ª—É—á–∞–µ–º –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —á–∞—Ç–∞, —Å –∫–æ—Ç–æ—Ä–æ–≥–æ –ø—Ä–∏—à–ª–æ —Å–æ–æ–±—â–µ–Ω–∏–µ
        chat_id = message.chat.id
        msg_text = message.text.encode('utf-8')
        user_id = message.chat.username
        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–ø—Ä–∞–≤–∏–ª "–ù–∞—á–∞—Ç—å" –∏–ª–∏ "–ò–∑–º–µ–Ω–∏—Ç—å –∏–Ω—Ç–µ—Ä–≤–∞–ª –æ—Ç–ø—Ä–∞–≤–∫–∏ –º–µ–º–æ–≤"
        if msg_text == config.START_KEYBOARD_BUTTON or msg_text == config.DEFAULT_KEYBOARD_BUTTON_2:
            bot.send_message(chat_id,  # –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —á–∞—Ç–∞
                             config.START_MESSAGE,  # –°–æ–æ–±—â–µ–Ω–∏–µ
                             reply_markup=init_intervals_keyboard())  # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞
        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–¥–∞–ª –Ω–æ–≤—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª –æ—Ç–ø—Ä–∞–≤–∫–∏ –º–µ–º–æ–≤
        elif "–º–∏–Ω—É—Ç" in msg_text:
            interval = int(msg_text[2:4].encode('utf-8'))
            end_of_every = "—ã–µ"
            if interval == 1:
                end_of_every = "—É—é"
            users_data_controller.add_user_if_needed(user_id, chat_id)
            users_data_controller.change_user_interval(user_id, interval)
            bot.send_message(chat_id,
                             config.INTERVAL_SET_MESSAGE.format(end_of_every, msg_text[2:]),
                             parse_mode='html',
                             reply_markup=init_default_keyboard())
        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–ø—Ä–æ—Å–∏–ª –Ω–æ–≤—ã–π –º–µ–º
        elif msg_text == config.DEFAULT_KEYBOARD_BUTTON_1:
            send_mem(chat_id, user_id)


# –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–µ—Ä–≤—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
def init_start_keyboard():
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è markup
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–Ω–æ–ø–∫–∏
    btn1 = types.KeyboardButton(config.START_KEYBOARD_BUTTON)
    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–Ω–æ–ø–∫–∏ –≤ markup
    markup.add(btn1)
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º markup
    return markup


# –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
def init_default_keyboard():
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è markup
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–Ω–æ–ø–æ–∫
    btn1 = types.KeyboardButton(config.DEFAULT_KEYBOARD_BUTTON_1)
    btn2 = types.KeyboardButton(config.DEFAULT_KEYBOARD_BUTTON_2)
    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–Ω–æ–ø–∫–∏ –≤ markup
    markup.add(btn1)
    markup.add(btn2)
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º markup
    return markup


# –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å–æ —Å–ø–∏—Å–∫–æ–º –º–∏–Ω—É—Ç
def init_intervals_keyboard():
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è markup
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–Ω–æ–ø–æ–∫ –≤ markup
    emojis = ['üïê', 'üïë', 'üïí', 'üïì', 'üïî', 'üïï', 'üïñ']
    # –ò—Ç–µ—Ä–∞—Ç–æ—Ä –¥–ª—è —ç–º–æ–¥–∑–∏
    iterator = 0
    for interval in config.INTERVALS:
        minutes_string = "–º–∏–Ω—É—Ç"
        if interval == 1:
            minutes_string = "–º–∏–Ω—É—Ç—É"
        elif interval == 3:
            minutes_string = "–º–∏–Ω—É—Ç—ã"
        # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é –∫–Ω–æ–ø–∫—É –≤ markup
        markup.add(types.KeyboardButton("{0} {1} {2}".format(emojis[iterator], interval, minutes_string)))
        # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∏—Ç–µ—Ä–∞—Ç–æ—Ä
        iterator += 1
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º markup
    return markup


def send_mem(chat_id, user_id):
    url = vk_utils.get_mem(user_id)
    if url != "":
        bot.send_photo(chat_id, url)
        bot_log_controller.log_send_mem(user_id, url)
    else:
        send_mem(chat_id, user_id)


def start_repeat_thread():
    thread = Thread(target=threaded_function)
    thread.start()


def threaded_function():
    print("Start repeat thread.")
    minutes_have_passed_since_the_launch = 0
    while True:
        users_for_distribution = []

        for interval in config.INTERVALS:
            if minutes_have_passed_since_the_launch % interval == 0:
                users = users_data_controller.get_all_users_by_interval(interval)
                users_for_distribution += users

        # –û—Ç–ø—Ä–∞–≤–∏—Ç—å –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
        counter = 0
        for user in users_for_distribution:
            send_mem(user['chat_id'], user['user_id'])
            counter += 1

        sleep(60)
        minutes_have_passed_since_the_launch += 1
        bot_log_controller.log_elapsed_time(minutes_have_passed_since_the_launch)


# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
print("Bot successful started!")
start_repeat_thread()
bot.polling(none_stop=True)
